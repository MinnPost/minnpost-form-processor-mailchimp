"use strict";!function(o){function r(e){return gtag("event","conversion",{send_to:params.gtag_sendto,event_callback:function(){void 0!==e&&(window.location=e)}}),!1}jQuery(document).ready(function(e){0<o(".m-form-minnpost-form-processor-mailchimp").length&&o(".m-form-minnpost-form-processor-mailchimp").submit(function(e){e.preventDefault(),e.stopImmediatePropagation();var s=o("button",this),i=s.text(),a=o(this).serialize();s.prop("disabled",!0),s.text("Processing"),a+="&ajaxrequest=true&subscribe",o.ajax({cache:!1,url:params.ajaxurl,type:"post",dataType:"json",data:a}).done(function(e){var a="",t="info";if(!0===e.success){s.text("Thanks");var n="Signup";switch(e.data.user_status){case"existing":n="Update",a="Thanks for updating your email preferences. They will go into effect immediately.";break;case"new":n="Signup",a="We have added you to the MinnPost mailing list.";break;case"pending":n="Signup",a="We have added you to the MinnPost mailing list. You will need to click the confirmation link in the email we sent to begin receiving messages."}""!==e.data.confirm_message&&(a=e.data.confirm_message),"function"==typeof wp_analytics_tracking_event&&wp_analytics_tracking_event("event","Newsletter",n,location.pathname),r(location.pathname)}else s.prop("disabled",!1),s.text(i),"function"==typeof wp_analytics_tracking_event&&wp_analytics_tracking_event("event","Newsletter","Fail",location.pathname),""!==e.data.confirm_message&&(a=e.data.confirm_message),t="error";o(".m-form-message-ajax").html(a),o(".m-form-message-ajax").addClass("m-form-message-"+t).removeClass("m-form-message-ajax-placeholder")}).fail(function(e){o(".m-form-message-ajax").html("<p>An error has occured. Please try again.</p>"),o(".m-form-message-ajax").addClass("m-form-message-error").removeClass("m-form-message-ajax-placeholder"),s.prop("disabled",!1),s.text(i),"function"==typeof wp_analytics_tracking_event&&wp_analytics_tracking_event("event","Newsletter","Fail",location.pathname)})})})}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNob3J0Y29kZS5qcyJdLCJuYW1lcyI6WyIkIiwiZ3RhZ19yZXBvcnRfY29udmVyc2lvbiIsInVybCIsImd0YWciLCJzZW5kX3RvIiwicGFyYW1zIiwiZ3RhZ19zZW5kdG8iLCJldmVudF9jYWxsYmFjayIsIndpbmRvdyIsImxvY2F0aW9uIiwialF1ZXJ5IiwiZG9jdW1lbnQiLCJyZWFkeSIsImxlbmd0aCIsInN1Ym1pdCIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJidXR0b24iLCJ0aGlzIiwicHJldmlvdXNfYnV0dG9uX3RleHQiLCJ0ZXh0IiwiYWpheF9mb3JtX2RhdGEiLCJzZXJpYWxpemUiLCJwcm9wIiwiYWpheCIsImNhY2hlIiwiYWpheHVybCIsInR5cGUiLCJkYXRhVHlwZSIsImRhdGEiLCJkb25lIiwicmVzcG9uc2UiLCJtZXNzYWdlIiwibWVzc2FnZV9jbGFzcyIsInN1Y2Nlc3MiLCJhbmFseXRpY3NfYWN0aW9uIiwidXNlcl9zdGF0dXMiLCJjb25maXJtX21lc3NhZ2UiLCJ3cF9hbmFseXRpY3NfdHJhY2tpbmdfZXZlbnQiLCJwYXRobmFtZSIsImh0bWwiLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwiZmFpbCJdLCJtYXBwaW5ncyI6ImNBQUEsU0FBWUEsR0FFWCxTQUFTQyxFQUF3QkMsR0FVaEMsT0FKQUMsS0FBTSxRQUFTLGFBQWMsQ0FDM0JDLFFBQVdDLE9BQU9DLFlBQ2xCQyxlQVBhLGdCQUNSLElBQXdCTCxJQUMzQk0sT0FBT0MsU0FBV1AsT0FPZixFQWdGUlEsT0FBUUMsVUFBV0MsTUFBTyxTQUFVWixHQTVFNEIsRUFBMURBLEVBQUcsNkNBQThDYSxRQUNyRGIsRUFBRyw2Q0FBOENjLE9BQVEsU0FBVUMsR0FDbEVBLEVBQU1DLGlCQUNORCxFQUFNRSwyQkFDTixJQUNJQyxFQUFTbEIsRUFBRyxTQUFVbUIsTUFDdEJDLEVBQXVCRixFQUFPRyxPQUM5QkMsRUFBaUJ0QixFQUFHbUIsTUFBT0ksWUFDL0JMLEVBQU9NLEtBQU0sWUFBWSxHQUN6Qk4sRUFBT0csS0FBTSxjQUViQyxHQUFrQyw4QkFDbEN0QixFQUFFeUIsS0FBSyxDQUNOQyxPQUFPLEVBQ1B4QixJQUFLRyxPQUFPc0IsUUFDWkMsS0FBTSxPQUNOQyxTQUFXLE9BQ1hDLEtBQU1SLElBRU5TLEtBQU0sU0FBVUMsR0FDaEIsSUFBSUMsRUFBZ0IsR0FDaEJDLEVBQWdCLE9BQ3BCLElBQUssSUFBU0YsRUFBU0csUUFBVSxDQUNoQ2pCLEVBQU9HLEtBQU0sVUFDYixJQUFJZSxFQUFtQixTQUN2QixPQUFTSixFQUFTRixLQUFLTyxhQUN0QixJQUFLLFdBQ0pELEVBQW1CLFNBQ25CSCxFQUFVLG9GQUNWLE1BQ0QsSUFBSyxNQUNKRyxFQUFtQixTQUNuQkgsRUFBVSxrREFDVixNQUNELElBQUssVUFDSkcsRUFBbUIsU0FDbkJILEVBQVUsaUpBR1AsS0FBT0QsRUFBU0YsS0FBS1Esa0JBQ3pCTCxFQUFVRCxFQUFTRixLQUFLUSxpQkFHcEIsbUJBQXNCQyw2QkFDMUJBLDRCQUE2QixRQUFTLGFBQWNILEVBQWtCM0IsU0FBUytCLFVBRy9FdkMsRUFBd0JRLFNBQVMrQixlQUdsQ3RCLEVBQU9NLEtBQU0sWUFBWSxHQUN6Qk4sRUFBT0csS0FBTUQsR0FDUixtQkFBc0JtQiw2QkFDMUJBLDRCQUE2QixRQUFTLGFBQWMsT0FBUTlCLFNBQVMrQixVQUVqRSxLQUFPUixFQUFTRixLQUFLUSxrQkFDekJMLEVBQVVELEVBQVNGLEtBQUtRLGlCQUV6QkosRUFBZ0IsUUFFakJsQyxFQUFHLHdCQUF5QnlDLEtBQU1SLEdBQ2xDakMsRUFBRyx3QkFBeUIwQyxTQUFVLGtCQUFvQlIsR0FBZ0JTLFlBQWEscUNBRXZGQyxLQUFNLFNBQVVaLEdBQ2hCaEMsRUFBRyx3QkFBeUJ5QyxLQUFNLGtEQUNsQ3pDLEVBQUcsd0JBQXlCMEMsU0FBVSx3QkFBeUJDLFlBQWEsbUNBQzVFekIsRUFBT00sS0FBTSxZQUFZLEdBQ3pCTixFQUFPRyxLQUFNRCxHQUNSLG1CQUFzQm1CLDZCQUMxQkEsNEJBQTZCLFFBQVMsYUFBYyxPQUFROUIsU0FBUytCLGdCQXJGM0UsQ0FnR0c5QiIsImZpbGUiOiJmcm9udC1lbmQubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKCBmdW5jdGlvbiggJCApIHtcblxuXHRmdW5jdGlvbiBndGFnX3JlcG9ydF9jb252ZXJzaW9uKCB1cmwgKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuXHRcdCAgaWYgKCAndW5kZWZpbmVkJyAhPT0gdHlwZW9mKCB1cmwgKSApIHtcblx0XHQgICAgd2luZG93LmxvY2F0aW9uID0gdXJsO1xuXHRcdCAgfVxuXHRcdH07XG5cdFx0Z3RhZyggJ2V2ZW50JywgJ2NvbnZlcnNpb24nLCB7XG5cdFx0ICAnc2VuZF90byc6IHBhcmFtcy5ndGFnX3NlbmR0byxcblx0XHQgICdldmVudF9jYWxsYmFjayc6IGNhbGxiYWNrXG5cdFx0fSApO1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGZ1bmN0aW9uIHNob3J0Y29kZUZvcm0oKSB7XG5cdFx0aWYgKCAkKCAnLm0tZm9ybS1taW5ucG9zdC1mb3JtLXByb2Nlc3Nvci1tYWlsY2hpbXAnICkubGVuZ3RoID4gMCApIHtcblx0XHRcdCQoICcubS1mb3JtLW1pbm5wb3N0LWZvcm0tcHJvY2Vzc29yLW1haWxjaGltcCcgKS5zdWJtaXQoIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCB0aGUgZGVmYXVsdCBmb3JtIHN1Ym1pdC5cblx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdHZhciB0aGF0ID0gdGhpcztcblx0XHRcdFx0dmFyIGJ1dHRvbiA9ICQoICdidXR0b24nLCB0aGlzICk7XG5cdFx0XHRcdHZhciBwcmV2aW91c19idXR0b25fdGV4dCA9IGJ1dHRvbi50ZXh0KCk7XG5cdFx0XHRcdHZhciBhamF4X2Zvcm1fZGF0YSA9ICQoIHRoaXMgKS5zZXJpYWxpemUoKTsgLy8gc2VyaWFsaXplIHRoZSBmb3JtIGRhdGFcblx0XHRcdFx0YnV0dG9uLnByb3AoICdkaXNhYmxlZCcsIHRydWUgKTtcblx0XHRcdFx0YnV0dG9uLnRleHQoICdQcm9jZXNzaW5nJyApO1xuXHRcdFx0XHQvL2FkZCBvdXIgb3duIGFqYXggY2hlY2sgYXMgWC1SZXF1ZXN0ZWQtV2l0aCBpcyBub3QgYWx3YXlzIHJlbGlhYmxlXG5cdFx0XHRcdGFqYXhfZm9ybV9kYXRhID0gYWpheF9mb3JtX2RhdGEgKyAnJmFqYXhyZXF1ZXN0PXRydWUmc3Vic2NyaWJlJztcblx0XHRcdFx0JC5hamF4KHtcblx0XHRcdFx0XHRjYWNoZTogZmFsc2UsXG5cdFx0XHRcdFx0dXJsOiBwYXJhbXMuYWpheHVybCwgLy8gZG9tYWluL3dwLWFkbWluL2FkbWluLWFqYXgucGhwXG5cdFx0XHRcdFx0dHlwZTogJ3Bvc3QnLFxuXHRcdFx0XHRcdGRhdGFUeXBlIDogJ2pzb24nLFxuXHRcdFx0XHRcdGRhdGE6IGFqYXhfZm9ybV9kYXRhXG5cdFx0XHRcdH0gKVxuXHRcdFx0XHQuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlICkgeyAvLyByZXNwb25zZSBmcm9tIHRoZSBQSFAgYWN0aW9uXG5cdFx0XHRcdFx0dmFyIG1lc3NhZ2UgICAgICAgPSAnJztcblx0XHRcdFx0XHR2YXIgbWVzc2FnZV9jbGFzcyA9ICdpbmZvJztcblx0XHRcdFx0XHRpZiAoIHRydWUgPT09IHJlc3BvbnNlLnN1Y2Nlc3MgKSB7XG5cdFx0XHRcdFx0XHRidXR0b24udGV4dCggJ1RoYW5rcycgKTtcblx0XHRcdFx0XHRcdHZhciBhbmFseXRpY3NfYWN0aW9uID0gJ1NpZ251cCc7XG5cdFx0XHRcdFx0XHRzd2l0Y2ggKCByZXNwb25zZS5kYXRhLnVzZXJfc3RhdHVzICkge1xuXHRcdFx0XHRcdFx0XHRjYXNlICdleGlzdGluZyc6XG5cdFx0XHRcdFx0XHRcdFx0YW5hbHl0aWNzX2FjdGlvbiA9ICdVcGRhdGUnO1xuXHRcdFx0XHRcdFx0XHRcdG1lc3NhZ2UgPSAnVGhhbmtzIGZvciB1cGRhdGluZyB5b3VyIGVtYWlsIHByZWZlcmVuY2VzLiBUaGV5IHdpbGwgZ28gaW50byBlZmZlY3QgaW1tZWRpYXRlbHkuJztcblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0Y2FzZSAnbmV3Jzpcblx0XHRcdFx0XHRcdFx0XHRhbmFseXRpY3NfYWN0aW9uID0gJ1NpZ251cCc7XG5cdFx0XHRcdFx0XHRcdFx0bWVzc2FnZSA9ICdXZSBoYXZlIGFkZGVkIHlvdSB0byB0aGUgTWlublBvc3QgbWFpbGluZyBsaXN0Lic7XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdGNhc2UgJ3BlbmRpbmcnOlxuXHRcdFx0XHRcdFx0XHRcdGFuYWx5dGljc19hY3Rpb24gPSAnU2lnbnVwJztcblx0XHRcdFx0XHRcdFx0XHRtZXNzYWdlID0gJ1dlIGhhdmUgYWRkZWQgeW91IHRvIHRoZSBNaW5uUG9zdCBtYWlsaW5nIGxpc3QuIFlvdSB3aWxsIG5lZWQgdG8gY2xpY2sgdGhlIGNvbmZpcm1hdGlvbiBsaW5rIGluIHRoZSBlbWFpbCB3ZSBzZW50IHRvIGJlZ2luIHJlY2VpdmluZyBtZXNzYWdlcy4nO1xuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCAnJyAhPT0gcmVzcG9uc2UuZGF0YS5jb25maXJtX21lc3NhZ2UgKSB7XG5cdFx0XHRcdFx0XHRcdG1lc3NhZ2UgPSByZXNwb25zZS5kYXRhLmNvbmZpcm1fbWVzc2FnZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKCAnZnVuY3Rpb24nID09PSB0eXBlb2Ygd3BfYW5hbHl0aWNzX3RyYWNraW5nX2V2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHR3cF9hbmFseXRpY3NfdHJhY2tpbmdfZXZlbnQoICdldmVudCcsICdOZXdzbGV0dGVyJywgYW5hbHl0aWNzX2FjdGlvbiwgbG9jYXRpb24ucGF0aG5hbWUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGd0YWdfcmVwb3J0X2NvbnZlcnNpb24gKSB7XG5cdFx0XHRcdFx0XHRcdGd0YWdfcmVwb3J0X2NvbnZlcnNpb24oIGxvY2F0aW9uLnBhdGhuYW1lICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGJ1dHRvbi5wcm9wKCAnZGlzYWJsZWQnLCBmYWxzZSApO1xuXHRcdFx0XHRcdFx0YnV0dG9uLnRleHQoIHByZXZpb3VzX2J1dHRvbl90ZXh0ICk7XG5cdFx0XHRcdFx0XHRpZiAoICdmdW5jdGlvbicgPT09IHR5cGVvZiB3cF9hbmFseXRpY3NfdHJhY2tpbmdfZXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHdwX2FuYWx5dGljc190cmFja2luZ19ldmVudCggJ2V2ZW50JywgJ05ld3NsZXR0ZXInLCAnRmFpbCcsIGxvY2F0aW9uLnBhdGhuYW1lICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoICcnICE9PSByZXNwb25zZS5kYXRhLmNvbmZpcm1fbWVzc2FnZSApIHtcblx0XHRcdFx0XHRcdFx0bWVzc2FnZSA9IHJlc3BvbnNlLmRhdGEuY29uZmlybV9tZXNzYWdlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWVzc2FnZV9jbGFzcyA9ICdlcnJvcic7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdCQoICcubS1mb3JtLW1lc3NhZ2UtYWpheCcgKS5odG1sKCBtZXNzYWdlICk7XG5cdFx0XHRcdFx0JCggJy5tLWZvcm0tbWVzc2FnZS1hamF4JyApLmFkZENsYXNzKCAnbS1mb3JtLW1lc3NhZ2UtJyArIG1lc3NhZ2VfY2xhc3MgKS5yZW1vdmVDbGFzcyggJ20tZm9ybS1tZXNzYWdlLWFqYXgtcGxhY2Vob2xkZXInICk7XG5cdFx0XHRcdH0gKVxuXHRcdFx0XHQuZmFpbCggZnVuY3Rpb24oIHJlc3BvbnNlICkge1xuXHRcdFx0XHRcdCQoICcubS1mb3JtLW1lc3NhZ2UtYWpheCcgKS5odG1sKCAnPHA+QW4gZXJyb3IgaGFzIG9jY3VyZWQuIFBsZWFzZSB0cnkgYWdhaW4uPC9wPicgKTtcblx0XHRcdFx0XHQkKCAnLm0tZm9ybS1tZXNzYWdlLWFqYXgnICkuYWRkQ2xhc3MoICdtLWZvcm0tbWVzc2FnZS1lcnJvcicgKS5yZW1vdmVDbGFzcyggJ20tZm9ybS1tZXNzYWdlLWFqYXgtcGxhY2Vob2xkZXInICk7XG5cdFx0XHRcdFx0YnV0dG9uLnByb3AoICdkaXNhYmxlZCcsIGZhbHNlICk7XG5cdFx0XHRcdFx0YnV0dG9uLnRleHQoIHByZXZpb3VzX2J1dHRvbl90ZXh0ICk7XG5cdFx0XHRcdFx0aWYgKCAnZnVuY3Rpb24nID09PSB0eXBlb2Ygd3BfYW5hbHl0aWNzX3RyYWNraW5nX2V2ZW50ICkge1xuXHRcdFx0XHRcdFx0d3BfYW5hbHl0aWNzX3RyYWNraW5nX2V2ZW50KCAnZXZlbnQnLCAnTmV3c2xldHRlcicsICdGYWlsJywgbG9jYXRpb24ucGF0aG5hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeSggZG9jdW1lbnQgKS5yZWFkeSggZnVuY3Rpb24oICQgKSB7XG5cdFx0c2hvcnRjb2RlRm9ybSgpO1xuXHR9KTtcblxufSkoalF1ZXJ5KTsiXX0=
